{
  "name": "thenBy.js",
  "version": "1.1.1",
  "description": "Micro library for sorting arrays using the firstBy().thenBy().thenBy() syntax",
  "main": "thenBy.module.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/Teun/thenBy.js.git"
  },
  "keywords": [
    "sort",
    "order",
    "sorting",
    "arrays",
    "multiple"
  ],
  "files": [
    "thenBy.module.js"
  ],
  "author": {
    "name": "Teun Duynstee"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/Teun/thenBy.js/issues"
  },
  "homepage": "https://github.com/Teun/thenBy.js",
  "readme": "thenBy.js\n=========\n\n`thenBy` is a javascript micro library that helps sorting arrays on multiple keys. It allows you to use the [native Array::sort() method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) of javascript, but pass in multiple functions to sort that are composed with `firstBy().thenBy().thenBy()` style.\n\nExample:\n```javascript\n// first by length of name, then by population, then by ID\ndata.sort(\n    firstBy(function (v1, v2) { return v1.name.length - v2.name.length; })\n    .thenBy(function (v1, v2) { return v1.population - v2.population; })\n    .thenBy(function (v1, v2) { return v1.id - v2.id; })\n);\n```\n\n### Sort by property names\nJavascript sorting relies heavily on passing discriminator functions that return -1, 0 or 1 for a pair of items. While this is very flexible, often you want to sort on the value of a simple property. As a convenience, thenBy.js builds the appropriate compare function for you if you pass in a property name (instead of a function). The example above would then look like this:\n```javascript\n// first by length of name, then by population, then by ID\ndata.sort(\n    firstBy(function (v1, v2) { return v1.name.length - v2.name.length; })\n    .thenBy(\"population\")\n    .thenBy(\"id\")\n);\n```\n\n### Sort by unary functions\nYou can also pass a function that takes a single item and returns its sorting key.\n```\n// first by length of name, then by population, then by ID\ndata.sort(\n    firstBy(function (v) { return v.name.length; })\n    .thenBy(function (v) { return v.population; })\n    .thenBy(\"id\")\n);\n```\n\n### Sort descending\nthenBy.js allows you to pass in a second parameter for `direction`. If you pass in -1 (nothing else), the sorting will be reversed. So:\n```javascript\n// first by length of name descending, then by population descending, then by ID ascending\ndata.sort(\n    firstBy(function (v1, v2) { return v1.name.length - v2.name.length; }, -1)\n    .thenBy(\"population\", -1)\n    .thenBy(\"id\")\n);\n```\n\n### Install in your HTML\nTo include it into your page/project, just paste the minified code from https://raw.github.com/Teun/thenBy.js/master/thenBy.min.js into yours (356 characters). If you don't want the `firstBy` function in your global namespace, you can assign it to a local variable (see sample.htm).\n\n### Install in node.js\n```npm install git+https://git@github.com/Teun/thenBy.js.git```\n\nthen in your app:\n\n```var firstBy = require('thenBy.js');```\n\n\nThanks a lot to https://github.com/bergus and https://github.com/hagabaka for their improvements.\n",
  "readmeFilename": "README.md",
  "_id": "thenBy.js@1.1.1",
  "_shasum": "65dc8dd7709dc503b0042fe722978cc3cb9978dc",
  "_resolved": "git+https://git@github.com/Teun/thenBy.js.git#e63e7d3cd843c992aa197e585588f36c5e0f5b13",
  "_from": "git+https://git@github.com/Teun/thenBy.js.git"
}
